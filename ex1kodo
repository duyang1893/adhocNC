
#include <algorithm>
#include <kodo/rlnc/sliding_window_encoder.hpp>
#include <kodo/rlnc/sliding_window_decoder.hpp>
#include <kodo/trace.hpp>
#include <ctime>
#include <set>
#include <kodo/set_systematic_on.hpp>
#include <kodo/set_systematic_off.hpp>

int main()
{
	srand((uint32_t)time(0));

	uint32_t symbols = 10;
	uint32_t symbol_size = 20;


	typedef kodo::sliding_window_encoder<fifi::binary8, kodo::disable_trace> rlnc_encoder;
	typedef kodo::sliding_window_decoder<fifi::binary8, kodo::enable_trace> rlnc_decoder;

	// In the following we will make an encoder/decoder factory.
	// The factories are used to build actual encoders/decoders
	rlnc_encoder::factory encoder_factory(symbols, symbol_size);
	auto encoder = encoder_factory.build();
	kodo::set_systematic_on(encoder);

	rlnc_decoder::factory decoder_factory(symbols, symbol_size);
	auto decoder = decoder_factory.build();


	std::vector<uint8_t> payload(encoder->payload_size());

	std::vector<uint8_t> data_in(encoder->block_size());
	
	std::vector<uint8_t> feedback(encoder->feedback_size());

	// Just for fun - fill the data with random data
	std::generate(data_in.begin(), data_in.end(), rand);

	// Lets split the data into symbols and feed the encoder one symbol
	// at a time
	//auto symbol_storage =	sak::split_storage(sak::storage(data_in), symbol_size);
	encoder->set_symbols(sak::storage(data_in));
	std::vector<uint8_t> data_out(decoder->block_size());

	typedef boost::dynamic_bitset<uint8_t> Bitset;
	Bitset bitset(feedback.size()*8); // 8 bits
	bitset[0]=1; bitset[3]=1;
  std::cout << bitset << "\n";
boost::to_block_range(bitset, feedback.data());
std::cout<<feedback.size()<<" "<<uint32_t(feedback[0])<<std::endl;


	while ( !decoder->is_complete() )
	{

//		encoder->read_feedback(feedback.data());

		// Encode a packet into the payload buffer
		encoder->encode(payload.data());
//		payload.resize(gid_index+1+symbols);
/*		for(uint32_t i=0; i<symbols; i++)
		{
			std::cout<<"i=="<<i<<"encoder->is_symbol_pivot="<<encoder->is_symbol_pivot(i)<<std::endl;
			std::cout<<"i=="<<i<<"encoder->remote_is_symbol_pivot="<<encoder->remote_is_symbol_pivot(i)<<std::endl;
			std::cout<<"i=="<<i<<"encoder->can_generate="<<encoder->can_generate(i)<<std::endl;	
		}*/		
std::cout<<"in_systematic_phase=="<<encoder->in_systematic_phase()<<std::endl;
for (uint32_t i=0;i<payload.size(); i++)
{
	std::cout<<uint32_t(payload[i])<<" ";
}
std::cout<<std::endl;

		if (kodo::has_trace<rlnc_encoder>::value)
		{
			kodo::trace(encoder, std::cout);
		}


		// Packet got through - pass that packet to the decoder
		decoder->decode(payload.data());

		if (kodo::has_trace<rlnc_decoder>::value)
		{
			auto filter = [](const std::string& zone)
			{
				std::set<std::string> filters =
				    {"decoder_state","input_symbol_coefficients"};

				return filters.count(zone);
			};

			std::cout << "Trace decoder:" << std::endl;
			kodo::trace(decoder, std::cout, filter);
			//kodo::trace(decoder, std::cout);
		}


		for(uint32_t i=0; i<symbols; i++)
		{
			std::cout<<"i=="<<i<<" decoder->is_symbol_uncoded="<<decoder->is_symbol_uncoded(i)<<std::endl;
		}

		// Transmit the feedback
//		decoder->write_feedback(feedback.data());
		decoder->copy_symbols(sak::storage(data_out));

		for (uint32_t i=0; i<symbols;i++)
		{
			if(std::equal(data_out.begin()+i*symbol_size, data_out.begin()+(i+1)*symbol_size-1, data_in.begin()+i*symbol_size))
			{
				std::cout<<"i=="<<i<<" equal"<<std::endl;
			}
		}

		//encoder->read_feedback(feedback.data());
		/*for (uint32_t i=0;i<feedback.size(); i++)
		{
			std::cout<<uint32_t(feedback[i])<<" ";
		}
		std::cout<<std::endl;*/
		std::cout<<std::endl;
	}

	// The decoder is complete, now copy the symbols from the decoder

	decoder->copy_symbols(sak::storage(data_out));
std::cout<<"encoder->rank_size()="<<encoder->rank_size()<<" header_size="<<encoder->header_size()<<" feedback-size="<<encoder->feedback_size()<<std::endl; 
	// Check we properly decoded the data
	if (data_out == data_in)
	{
	std::cout << "Data decoded correctly" << std::endl;
	}
	else
	{
	std::cout << "Unexpected failure to decode "
	  << "please file a bug report :)" << std::endl;
	}
}
